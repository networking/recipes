{
  "manifests": {
    "networking/init-cms-bundle": {
      "manifest": {
        "bundles": {
          "Networking\\InitCmsBundle\\NetworkingInitCmsBundle": [
            "all"
          ]
        },
        "copy-from-recipe": {
          "config/": "%CONFIG_DIR%/",
          "src/": "%SRC_DIR%/"
        },
        "env": {
          "LOCALE": "en",
          "ADMIN_EMAIL_ADDRESS": "info@example.com"
        },
        "composer-scripts": {
          "ckeditor:install --clear=drop --tag=4.22.1": "symfony-cmd",
          "assets:install %PUBLIC_DIR%": "symfony-cmd",
          "bazinga:js-translation:dump --merge-domains %PUBLIC_DIR%/js": "symfony-cmd"
        },
        "post-install-output": [
          "  * The <fg=blue>InitCmsBundle</> imports many configuration files, such as doctrine.yaml, security.yaml etc. In order",
          "  to ensure your app will work please do the following:",
          "    1. Check that all files imported via the networking_init_cms.yaml file are not overwritten with a similar",
          "       configuration file in your /config/packages folder. !IMPORTANT the doctrine.yaml and security.yaml must be either",
          "       deleted, or update/extended with the configuration as proposed in the doctrine.yaml and security.yaml files",
          "       included with the CMS.",
          "    2. Check that the Page and User entities were copied to the correct entity folder, and are configured correctly.",
          "    3. Configure your languages in the networking_init_cms.yaml file, for multi-language support.",
          "    4. Configure the lexik translation bundles fallback_local and managed_locales parameters to support DB based translations.",
          "    5. Clear the cache again so that the new config files are loaded correctly.",
          "    6. Check your database configuration, and back up your database if you haven't done so already.",
          "    7. Update your database <fg=blue>bin/console doctrine:schema:update</> or using the doctrine migrate commands",
          "    8. Use the command networking:initcms:install to install the DB install fixtures and create a superuser admin.",
          "       ALTERNATIVELY you can use the networking:initcms:data-setup if you just want to install the data structure and fixtures",
          "    9. Enable or disable full page caching by setting networking_init_cms.cache.activate to true/false"
        ]
      },
      "files": {
        "config/packages/networking_init_cms.yaml": {
          "contents": [
            "imports:",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/assets.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/doctrine.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/fos_ck_editor.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/oneup_flysystem.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/oneup_uploader.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/sonata_admin.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/sonata_block.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/sonata_doctrine_admin.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/sonata_media.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/sonata_user.yaml\" }",
            "    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/symfony_cmf_routing_extra.yaml\" }",
            "# Default security configuration",
            "#    - { resource: \"@NetworkingInitCmsBundle/Resources/config/cms/security.yaml\" }",
            "",
            "# Make sure to set the default fall back locale for the framework translator",
            "#framework:",
            "#    translator: { fallbacks: ['%env(LOCALE)%'] }",
            "",
            "# Set the managed locale and fallback locale for the lexik translation bundle",
            "#lexik_translation:",
            "#    fallback_locale:  '%env(LOCALE)%'      # (required) default locale to use",
            "#    managed_locales: [ 'de', 'fr', 'it', 'en'] # !IMPORTANT: Change to strings and not environment variables",
            "#    resources_registration:",
            "#        type:                 all  # all | files | database",
            "#        managed_locales_only: false # set to true to only include managed_locales",
            "",
            "networking_init_cms:",
            "    #Base classes to be used for the page and user entities",
            "    class:",
            "        page: 'App\\Entity\\Page'",
            "        user: 'App\\Entity\\User'",
            "",
            "    email_address:",
            "        from_name: 'InitCMS'",
            "        from_address: '%env(ADMIN_EMAIL_ADDRESS)%'",
            "    ## Uncomment to enable webauthn (see webauthn.md for more information)",
            "    #webauthn:",
            "    #    enabled: true",
            "    ## Uncomment to enable two-factor authentication",
            "    #2fa_authenticator:",
            "    #    enabled: true",
            "    #    server: 'sandbox-6.test'",
            "    #    trusted_ip_list:",
            "    #        - 127.0.0.1",
            "    #    forced_for_role:",
            "    #        - ROLE_SONATA_ADMIN",
            "    #        - ROLE_SUPER_ADMIN",
            "    single_language: false",
            "    allow_locale_cookie: true",
            "    languages:",
            "        - { label: D, locale: de }",
            "        - { label: F, locale: fr }",
            "        - { label: I, locale: it }",
            "        - { label: E, locale: en }",
            "",
            "    # Bootstrap some template settings to get you started",
            "    templates:",
            "        app_single_column:",
            "            template: \"@NetworkingInitCms/sandbox/page/one_column.html.twig\"",
            "            name: \"Single Column\"",
            "            icon: \"bundles/networkinginitcms/img/template_header_one_column.png\"",
            "            zones:",
            "                - { name: header, class: 'col-md-12' }",
            "                - { name: main_content, class: 'col-md-12'}",
            "        app_two_column:",
            "            template: \"@NetworkingInitCms/sandbox/page/two_column.html.twig\"",
            "            name: \"Two Column\"",
            "            icon: \"bundles/networkinginitcms/img/template_header_two_column.png\"",
            "            zones:",
            "                - { name: header , class: 'col-md-12'}",
            "                - { name: left , class: 'col-md-3'}",
            "                - { name: right , class: 'col-md-9'}",
            "    cache:",
            "        activate: true #enable for product, false in dev config",
            "    content_types:",
            "        -",
            "            name: \"Text\"",
            "            class: 'Networking\\InitCmsBundle\\Entity\\Text'",
            "            icon: 'ki-outline ki-text-align-left'",
            "            default_template: '@NetworkingInitCms/Text/frontend_text_block.html.twig'",
            "        -",
            "            name: \"Gallery\"",
            "            class: 'Networking\\InitCmsBundle\\Entity\\GalleryView'",
            "            icon: 'ki-outline ki-picture'",
            "            default_template: '@NetworkingInitCms/GalleryView/gallery_view.html.twig'",
            "",
            "    # For more information regarding configuration of the CMS Bundle, please visit the following documentation",
            "    # https://github.com/networking/init-cms-bundle/blob/master/doc/configuration.md",
            "",
            "when@dev:",
            "    networking_init_cms:",
            "        cache:",
            "            activate: false"
          ],
          "executable": false
        },
        "config/routes/networking_init_cms.yaml": {
          "contents": [
            "networking_init_cms:",
            "    resource: \"@NetworkingInitCmsBundle/Resources/config/routing/routing.yaml\"",
            "    prefix:   /",
            "",
            "when@dev:",
            "    networking_init_install:",
            "        resource: \"@NetworkingInitCmsBundle/Resources/config/routing/install.yaml\"",
            "        prefix: /",
            ""
          ],
          "executable": false
        },
        "src/Entity/Page.php": {
          "contents": [
            "<?php",
            "namespace App\\Entity;",
            "",
            "use Doctrine\\Common\\Collections\\Collection;",
            "use Doctrine\\ORM\\Mapping as ORM;",
            "use Gedmo\\Mapping\\Annotation as Gedmo;",
            "use Networking\\InitCmsBundle\\Entity\\BasePage;",
            "use Networking\\InitCmsBundle\\Entity\\LayoutBlock;",
            "use Networking\\InitCmsBundle\\Entity\\MenuItem;",
            "use Networking\\InitCmsBundle\\Entity\\PageSnapshot;",
            "use Networking\\InitCmsBundle\\Model\\ContentRouteInterface;",
            "use Networking\\InitCmsBundle\\Model\\PageInterface;",
            "#[ORM\\Entity()]",
            "#[ORM\\HasLifecycleCallbacks()]",
            "#[ORM\\Table(name: 'page', uniqueConstraints: [])]",
            "#[ORM\\UniqueConstraint(name: 'path_idx', columns: ['path', 'locale'])]",
            "class Page extends BasePage",
            "{",
            "    #[ORM\\Column(type: 'integer')]",
            "    #[ORM\\Id]",
            "    #[ORM\\GeneratedValue(strategy: 'IDENTITY')]",
            "    protected $id;",
            "",
            "    #[ORM\\OneToOne(targetEntity: \\Networking\\InitCmsBundle\\Entity\\ContentRoute::class, cascade: ['remove', 'persist'])]",
            "    #[ORM\\JoinColumn(name: 'content_route_id', referencedColumnName: 'id')]",
            "    protected ?ContentRouteInterface $contentRoute = null;",
            "",
            "    #[ORM\\OneToMany(mappedBy: 'page', targetEntity: LayoutBlock::class, cascade: ['remove', 'persist'], orphanRemoval: true)]",
            "    #[ORM\\OrderBy(['sortOrder' => 'ASC'])]",
            "    protected ?Collection $layoutBlocks = null;",
            "",
            "    #[ORM\\OneToMany(mappedBy: 'page', targetEntity: MenuItem::class, cascade: ['remove'], orphanRemoval: true)]",
            "    protected ?Collection $menuItem = null;",
            "",
            "    #[ORM\\OneToMany(mappedBy: 'page', targetEntity: PageSnapshot::class, cascade: ['remove'], orphanRemoval: true)]",
            "    #[ORM\\OrderBy(['version' => 'DESC'])]",
            "    protected ?Collection $snapshots = null;",
            "",
            "    #[ORM\\OneToMany(mappedBy: 'parent', targetEntity: Page::class)]",
            "    protected Collection|array $children;",
            "",
            "    #[ORM\\ManyToOne(targetEntity: Page::class)]",
            "    #[ORM\\JoinColumn(name: 'alias_id', referencedColumnName: 'id', onDelete: 'SET NULL')]",
            "    protected ?PageInterface $alias = null;",
            "",
            "    #[ORM\\ManyToOne(targetEntity: Page::class, cascade: ['persist'], inversedBy: 'children')]",
            "    #[ORM\\JoinColumn(name: 'parent_id', referencedColumnName: 'id', onDelete: 'SET NULL')]",
            "    #[Gedmo\\TreeParent]",
            "    protected PageInterface|int|null $parent = null;",
            "",
            "    #[ORM\\ManyToMany(targetEntity: Page::class, inversedBy: 'translations', cascade: ['persist'])]",
            "    #[ORM\\JoinTable(name: 'page_translation')]",
            "    #[ORM\\JoinColumn(name: 'translation_id', referencedColumnName: 'id')]",
            "    #[ORM\\InverseJoinColumn(name: 'original_id', referencedColumnName: 'id')]",
            "    protected Collection|array $originals;",
            "",
            "    #[ORM\\ManyToMany(targetEntity: Page::class, mappedBy: 'originals', cascade: ['persist'])]",
            "    protected Collection|array $translations;",
            "",
            "    #[Gedmo\\TreePathSource()]",
            "    #[ORM\\Column(type: 'string', length: 255, nullable: true)]",
            "    protected ?string $url = null;",
            "",
            "    #[Gedmo\\TreePath(separator: \"/\")]",
            "    #[ORM\\Column(type: 'string', length: 255, nullable: true)]",
            "    protected ?string $path = null;",
            "",
            "    #[Gedmo\\TreeLevel()]",
            "    #[ORM\\Column(name: 'lvl', type: 'integer', nullable: true)]",
            "    protected ?int $level = null;",
            "",
            "    public function setId($id): self",
            "    {",
            "        $this->id = $id;",
            "        return $this;",
            "    }",
            "}",
            ""
          ],
          "executable": false
        },
        "src/Entity/User.php": {
          "contents": [
            "<?php",
            "",
            "namespace App\\Entity;",
            "",
            "use Doctrine\\Common\\Collections\\Collection;",
            "use Doctrine\\ORM\\Mapping as ORM;",
            "use Networking\\InitCmsBundle\\Entity\\BaseUser;",
            "use Networking\\InitCmsBundle\\Entity\\Group;",
            "",
            "#[ORM\\Table(name: 'user')]",
            "#[ORM\\Entity]",
            "class User extends BaseUser",
            "{",
            "    #[ORM\\Column(name: 'id', type: 'integer')]",
            "    #[ORM\\Id]",
            "    #[ORM\\GeneratedValue(strategy: 'AUTO')]",
            "    protected $id;",
            "",
            "    #[ORM\\Column(name: 'admin_settings', type: 'json', nullable: true)]",
            "    protected $adminSettings;",
            "",
            "    #[ORM\\Column(name: 'locale', type: 'string', length: 6, nullable: true)]",
            "    protected ?string $locale;",
            "",
            "    #[ORM\\Column(name: 'firstname', type: 'string', length: 255, nullable: true)]",
            "    protected ?string $firstname;",
            "",
            "    #[ORM\\Column(name: 'lastname', type: 'string', length: 255, nullable: true)]",
            "    protected ?string $lastname;",
            "",
            "    #[ORM\\Column(name: 'two_step_code', type: 'string', length: 255, nullable: true)]",
            "    protected ?string $twoStepVerificationCode;",
            "",
            "    #[ORM\\ManyToMany(targetEntity: Group::class)]",
            "    #[ORM\\JoinTable(name: 'user_user_group')]",
            "    #[ORM\\JoinColumn(name: 'user_id', referencedColumnName: 'id', onDelete: 'CASCADE')]",
            "    #[ORM\\InverseJoinColumn(name: 'group_id', referencedColumnName: 'id', onDelete: 'CASCADE')]",
            "    protected array|Collection $groups = [];",
            "}",
            ""
          ],
          "executable": false
        }
      },
      "ref": "136c62e4d0d0cc244c2e39c33cd93d3ddb2e2c2b"
    }
  }
}